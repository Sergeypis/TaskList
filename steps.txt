1. Установить Poetry
Windows: (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -
Ubuntu: curl -sSL https://install.python-poetry.org | python3 -

Добавить соответствующую директорию в PATH:
# Linux, MacOS, WSL
$HOME/.local/bin

Создание проекта с нуля (из терминала): poetry new my-project
Подключение Poetry к существующему проекту: poetry init

Можно указать нужный интерпретатор для env:
poetry env use python3.8  # Если python3.8 есть в PATH
poetry env use /path/to/python  # Можно указать и полный путь

По умолчанию, Poetry создает виртуальные окружения в папке {cache_dir}/virtualenvs.
Если нужно в папке проекта, можно выполнить следующую команду: poetry config virtualenvs.in-project true

2. Создать папку src и инициализировать venv poetry в ней (poetry init)
3. Установить зависимости (poetr add django и тп)
4. Создать в src проект django
5. Создать файл .gitignore
6. Создать Git репозиторий и сделать первый коммит
7. Создать ReadMe.MD
8. Создать файл конфигурации проекта (файл .env, пакет django-environ)
9. Создать приложение core
10. Добавить в core/models кастомную модель пользователя User(AbstractUser) вместо стандартной django User, добавить
в settings.py AUTH_USER_MODEL = 'core.User' и только потом можно делать makemigrations, чтобы не было ошибки
11. Настроить подключение к БД в .env и docker-compose.yaml
12. Создать файл docker-compose.yaml с сервисом БД
13. Создать docker-образ приложения, docker-файл
14. Создать файл docker-compose.yaml с сервисами приложения
15. Установит DRF и social-auth-app-django
16. Создать класс поля для паролей(переопределить serializers.CharField)
17. Создать сериализатор для модели пользователя с новыми полями паролей
18. Создать generics.CreateAPIView ручку для регистрации пользователя
19. Прописать пути в urls'ы
20.



# "docker-compose build", создание образов в контейнерах без их запуска
# "docker-compose up", создание и запуск контейнеров
# "docker-compose logs -f", просмотр потока логов в реальном времени

